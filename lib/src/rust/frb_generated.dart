// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 359645397;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_astral',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiSimpleCloseServer();

  Future<JoinHandleResultString> crateApiSimpleCreateServer({
    required String username,
    required bool enableDhcp,
    required String specifiedIp,
    required String roomName,
    required String roomPassword,
    required List<String> severurl,
    required List<String> onurl,
    required FlagsC flag,
  });

  Future<String> crateApiSimpleEasytierVersion();

  Future<List<String>> crateApiSimpleGetIps();

  Future<NetworkInterfaceHops> crateApiSimpleGetNetworkInterfaceHops();

  Future<KVNetworkStatus> crateApiSimpleGetNetworkStatus();

  Future<List<PeerRoutePair>> crateApiSimpleGetPeerRoutePairs();

  Future<String> crateApiSimpleGetRunningInfo();

  Future<JoinHandle> crateApiSimpleHandleEvent({
    required EventBusSubscriber events,
  });

  Future<void> crateApiSimpleInitApp();

  Future<void> crateApiSimpleInjectDllToPid({
    required String pid,
    required String dllPath,
  });

  Future<bool> crateApiSimpleIsEasytierRunning();

  Future<bool> crateApiSimpleSetNetworkInterfaceHops({required int hop});

  Future<void> crateApiSimpleSetTunFd({required int fd});

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EventBusSubscriber;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EventBusSubscriber;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_EventBusSubscriberPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_JoinHandle;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_JoinHandle;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_JoinHandlePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_JoinHandleResultString;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_JoinHandleResultString;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_JoinHandleResultStringPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_PeerRoutePair;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_PeerRoutePair;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_PeerRoutePairPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiSimpleCloseServer() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleCloseServerConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleCloseServerConstMeta =>
      const TaskConstMeta(debugName: "close_server", argNames: []);

  @override
  Future<JoinHandleResultString> crateApiSimpleCreateServer({
    required String username,
    required bool enableDhcp,
    required String specifiedIp,
    required String roomName,
    required String roomPassword,
    required List<String> severurl,
    required List<String> onurl,
    required FlagsC flag,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(username, serializer);
          sse_encode_bool(enableDhcp, serializer);
          sse_encode_String(specifiedIp, serializer);
          sse_encode_String(roomName, serializer);
          sse_encode_String(roomPassword, serializer);
          sse_encode_list_String(severurl, serializer);
          sse_encode_list_String(onurl, serializer);
          sse_encode_box_autoadd_flags_c(flag, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleResultString,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleCreateServerConstMeta,
        argValues: [
          username,
          enableDhcp,
          specifiedIp,
          roomName,
          roomPassword,
          severurl,
          onurl,
          flag,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleCreateServerConstMeta => const TaskConstMeta(
    debugName: "create_server",
    argNames: [
      "username",
      "enableDhcp",
      "specifiedIp",
      "roomName",
      "roomPassword",
      "severurl",
      "onurl",
      "flag",
    ],
  );

  @override
  Future<String> crateApiSimpleEasytierVersion() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleEasytierVersionConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleEasytierVersionConstMeta =>
      const TaskConstMeta(debugName: "easytier_version", argNames: []);

  @override
  Future<List<String>> crateApiSimpleGetIps() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGetIpsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGetIpsConstMeta =>
      const TaskConstMeta(debugName: "get_ips", argNames: []);

  @override
  Future<NetworkInterfaceHops> crateApiSimpleGetNetworkInterfaceHops() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_network_interface_hops,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGetNetworkInterfaceHopsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGetNetworkInterfaceHopsConstMeta =>
      const TaskConstMeta(
        debugName: "get_network_interface_hops",
        argNames: [],
      );

  @override
  Future<KVNetworkStatus> crateApiSimpleGetNetworkStatus() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_kv_network_status,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGetNetworkStatusConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGetNetworkStatusConstMeta =>
      const TaskConstMeta(debugName: "get_network_status", argNames: []);

  @override
  Future<List<PeerRoutePair>> crateApiSimpleGetPeerRoutePairs() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeerRoutePair,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleGetPeerRoutePairsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGetPeerRoutePairsConstMeta =>
      const TaskConstMeta(debugName: "get_peer_route_pairs", argNames: []);

  @override
  Future<String> crateApiSimpleGetRunningInfo() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGetRunningInfoConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGetRunningInfoConstMeta =>
      const TaskConstMeta(debugName: "get_running_info", argNames: []);

  @override
  Future<JoinHandle> crateApiSimpleHandleEvent({
    required EventBusSubscriber events,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusSubscriber(
            events,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandle,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleHandleEventConstMeta,
        argValues: [events],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleHandleEventConstMeta =>
      const TaskConstMeta(debugName: "handle_event", argNames: ["events"]);

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Future<void> crateApiSimpleInjectDllToPid({
    required String pid,
    required String dllPath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pid, serializer);
          sse_encode_String(dllPath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInjectDllToPidConstMeta,
        argValues: [pid, dllPath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInjectDllToPidConstMeta =>
      const TaskConstMeta(
        debugName: "inject_dll_to_pid",
        argNames: ["pid", "dllPath"],
      );

  @override
  Future<bool> crateApiSimpleIsEasytierRunning() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleIsEasytierRunningConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleIsEasytierRunningConstMeta =>
      const TaskConstMeta(debugName: "is_easytier_running", argNames: []);

  @override
  Future<bool> crateApiSimpleSetNetworkInterfaceHops({required int hop}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_i_32(hop, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleSetNetworkInterfaceHopsConstMeta,
        argValues: [hop],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleSetNetworkInterfaceHopsConstMeta =>
      const TaskConstMeta(
        debugName: "set_network_interface_hops",
        argNames: ["hop"],
      );

  @override
  Future<void> crateApiSimpleSetTunFd({required int fd}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_i_32(fd, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleSetTunFdConstMeta,
        argValues: [fd],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleSetTunFdConstMeta =>
      const TaskConstMeta(debugName: "set_tun_fd", argNames: ["fd"]);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EventBusSubscriber =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusSubscriber;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EventBusSubscriber =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusSubscriber;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_JoinHandle =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandle;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_JoinHandle =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandle;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_JoinHandleResultString =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleResultString;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_JoinHandleResultString =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleResultString;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_PeerRoutePair =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeerRoutePair;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_PeerRoutePair =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeerRoutePair;

  @protected
  EventBusSubscriber
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusSubscriber(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventBusSubscriberImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JoinHandle
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JoinHandleResultString
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleResultString(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinHandleResultStringImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  PeerRoutePair
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeerRoutePair(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PeerRoutePairImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EventBusSubscriber
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusSubscriber(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventBusSubscriberImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JoinHandle
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JoinHandleResultString
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleResultString(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinHandleResultStringImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  PeerRoutePair
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeerRoutePair(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PeerRoutePairImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  FlagsC dco_decode_box_autoadd_flags_c(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_flags_c(raw);
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FlagsC dco_decode_flags_c(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 20)
      throw Exception('unexpected arr length: expect 20 but see ${arr.length}');
    return FlagsC(
      defaultProtocol: dco_decode_String(arr[0]),
      devName: dco_decode_String(arr[1]),
      enableEncryption: dco_decode_bool(arr[2]),
      enableIpv6: dco_decode_bool(arr[3]),
      mtu: dco_decode_u_32(arr[4]),
      latencyFirst: dco_decode_bool(arr[5]),
      enableExitNode: dco_decode_bool(arr[6]),
      noTun: dco_decode_bool(arr[7]),
      useSmoltcp: dco_decode_bool(arr[8]),
      relayNetworkWhitelist: dco_decode_String(arr[9]),
      disableP2P: dco_decode_bool(arr[10]),
      relayAllPeerRpc: dco_decode_bool(arr[11]),
      disableUdpHolePunching: dco_decode_bool(arr[12]),
      multiThread: dco_decode_bool(arr[13]),
      dataCompressAlgo: dco_decode_i_32(arr[14]),
      bindDevice: dco_decode_bool(arr[15]),
      enableKcpProxy: dco_decode_bool(arr[16]),
      disableKcpInput: dco_decode_bool(arr[17]),
      disableRelayKcp: dco_decode_bool(arr[18]),
      proxyForwardBySystem: dco_decode_bool(arr[19]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  KVNetworkStatus dco_decode_kv_network_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return KVNetworkStatus(
      totalNodes: dco_decode_usize(arr[0]),
      nodes: dco_decode_list_kv_node_info(arr[1]),
    );
  }

  @protected
  KVNodeConnectionStats dco_decode_kv_node_connection_stats(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return KVNodeConnectionStats(
      connType: dco_decode_String(arr[0]),
      rxBytes: dco_decode_u_64(arr[1]),
      txBytes: dco_decode_u_64(arr[2]),
      rxPackets: dco_decode_u_64(arr[3]),
      txPackets: dco_decode_u_64(arr[4]),
    );
  }

  @protected
  KVNodeInfo dco_decode_kv_node_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return KVNodeInfo(
      hostname: dco_decode_String(arr[0]),
      ipv4: dco_decode_String(arr[1]),
      latencyMs: dco_decode_f_64(arr[2]),
      nat: dco_decode_String(arr[3]),
      hops: dco_decode_list_node_hop_stats(arr[4]),
      lossRate: dco_decode_f_32(arr[5]),
      connections: dco_decode_list_kv_node_connection_stats(arr[6]),
      version: dco_decode_String(arr[7]),
      cost: dco_decode_i_32(arr[8]),
    );
  }

  @protected
  List<PeerRoutePair>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeerRoutePair(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeerRoutePair,
        )
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<KVNodeConnectionStats> dco_decode_list_kv_node_connection_stats(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_kv_node_connection_stats)
        .toList();
  }

  @protected
  List<KVNodeInfo> dco_decode_list_kv_node_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_kv_node_info).toList();
  }

  @protected
  List<NetworkInterfaceHop> dco_decode_list_network_interface_hop(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_network_interface_hop)
        .toList();
  }

  @protected
  List<NodeHopStats> dco_decode_list_node_hop_stats(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_node_hop_stats).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  NetworkInterfaceHop dco_decode_network_interface_hop(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return NetworkInterfaceHop(
      interfaceName: dco_decode_String(arr[0]),
      hopCount: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  NetworkInterfaceHops dco_decode_network_interface_hops(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NetworkInterfaceHops(
      hops: dco_decode_list_network_interface_hop(arr[0]),
    );
  }

  @protected
  NodeHopStats dco_decode_node_hop_stats(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return NodeHopStats(
      targetIp: dco_decode_String(arr[0]),
      latencyMs: dco_decode_f_64(arr[1]),
      packetLoss: dco_decode_f_32(arr[2]),
      nodeName: dco_decode_String(arr[3]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  EventBusSubscriber
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusSubscriber(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventBusSubscriberImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  JoinHandle
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  JoinHandleResultString
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleResultString(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinHandleResultStringImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PeerRoutePair
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeerRoutePair(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PeerRoutePairImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EventBusSubscriber
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusSubscriber(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventBusSubscriberImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  JoinHandle
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  JoinHandleResultString
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleResultString(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinHandleResultStringImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PeerRoutePair
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeerRoutePair(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PeerRoutePairImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  FlagsC sse_decode_box_autoadd_flags_c(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_flags_c(deserializer));
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  FlagsC sse_decode_flags_c(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_defaultProtocol = sse_decode_String(deserializer);
    var var_devName = sse_decode_String(deserializer);
    var var_enableEncryption = sse_decode_bool(deserializer);
    var var_enableIpv6 = sse_decode_bool(deserializer);
    var var_mtu = sse_decode_u_32(deserializer);
    var var_latencyFirst = sse_decode_bool(deserializer);
    var var_enableExitNode = sse_decode_bool(deserializer);
    var var_noTun = sse_decode_bool(deserializer);
    var var_useSmoltcp = sse_decode_bool(deserializer);
    var var_relayNetworkWhitelist = sse_decode_String(deserializer);
    var var_disableP2P = sse_decode_bool(deserializer);
    var var_relayAllPeerRpc = sse_decode_bool(deserializer);
    var var_disableUdpHolePunching = sse_decode_bool(deserializer);
    var var_multiThread = sse_decode_bool(deserializer);
    var var_dataCompressAlgo = sse_decode_i_32(deserializer);
    var var_bindDevice = sse_decode_bool(deserializer);
    var var_enableKcpProxy = sse_decode_bool(deserializer);
    var var_disableKcpInput = sse_decode_bool(deserializer);
    var var_disableRelayKcp = sse_decode_bool(deserializer);
    var var_proxyForwardBySystem = sse_decode_bool(deserializer);
    return FlagsC(
      defaultProtocol: var_defaultProtocol,
      devName: var_devName,
      enableEncryption: var_enableEncryption,
      enableIpv6: var_enableIpv6,
      mtu: var_mtu,
      latencyFirst: var_latencyFirst,
      enableExitNode: var_enableExitNode,
      noTun: var_noTun,
      useSmoltcp: var_useSmoltcp,
      relayNetworkWhitelist: var_relayNetworkWhitelist,
      disableP2P: var_disableP2P,
      relayAllPeerRpc: var_relayAllPeerRpc,
      disableUdpHolePunching: var_disableUdpHolePunching,
      multiThread: var_multiThread,
      dataCompressAlgo: var_dataCompressAlgo,
      bindDevice: var_bindDevice,
      enableKcpProxy: var_enableKcpProxy,
      disableKcpInput: var_disableKcpInput,
      disableRelayKcp: var_disableRelayKcp,
      proxyForwardBySystem: var_proxyForwardBySystem,
    );
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  KVNetworkStatus sse_decode_kv_network_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_totalNodes = sse_decode_usize(deserializer);
    var var_nodes = sse_decode_list_kv_node_info(deserializer);
    return KVNetworkStatus(totalNodes: var_totalNodes, nodes: var_nodes);
  }

  @protected
  KVNodeConnectionStats sse_decode_kv_node_connection_stats(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_connType = sse_decode_String(deserializer);
    var var_rxBytes = sse_decode_u_64(deserializer);
    var var_txBytes = sse_decode_u_64(deserializer);
    var var_rxPackets = sse_decode_u_64(deserializer);
    var var_txPackets = sse_decode_u_64(deserializer);
    return KVNodeConnectionStats(
      connType: var_connType,
      rxBytes: var_rxBytes,
      txBytes: var_txBytes,
      rxPackets: var_rxPackets,
      txPackets: var_txPackets,
    );
  }

  @protected
  KVNodeInfo sse_decode_kv_node_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_hostname = sse_decode_String(deserializer);
    var var_ipv4 = sse_decode_String(deserializer);
    var var_latencyMs = sse_decode_f_64(deserializer);
    var var_nat = sse_decode_String(deserializer);
    var var_hops = sse_decode_list_node_hop_stats(deserializer);
    var var_lossRate = sse_decode_f_32(deserializer);
    var var_connections = sse_decode_list_kv_node_connection_stats(
      deserializer,
    );
    var var_version = sse_decode_String(deserializer);
    var var_cost = sse_decode_i_32(deserializer);
    return KVNodeInfo(
      hostname: var_hostname,
      ipv4: var_ipv4,
      latencyMs: var_latencyMs,
      nat: var_nat,
      hops: var_hops,
      lossRate: var_lossRate,
      connections: var_connections,
      version: var_version,
      cost: var_cost,
    );
  }

  @protected
  List<PeerRoutePair>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeerRoutePair(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PeerRoutePair>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeerRoutePair(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<KVNodeConnectionStats> sse_decode_list_kv_node_connection_stats(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <KVNodeConnectionStats>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_kv_node_connection_stats(deserializer));
    }
    return ans_;
  }

  @protected
  List<KVNodeInfo> sse_decode_list_kv_node_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <KVNodeInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_kv_node_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<NetworkInterfaceHop> sse_decode_list_network_interface_hop(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NetworkInterfaceHop>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_network_interface_hop(deserializer));
    }
    return ans_;
  }

  @protected
  List<NodeHopStats> sse_decode_list_node_hop_stats(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NodeHopStats>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_node_hop_stats(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  NetworkInterfaceHop sse_decode_network_interface_hop(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_interfaceName = sse_decode_String(deserializer);
    var var_hopCount = sse_decode_u_32(deserializer);
    return NetworkInterfaceHop(
      interfaceName: var_interfaceName,
      hopCount: var_hopCount,
    );
  }

  @protected
  NetworkInterfaceHops sse_decode_network_interface_hops(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_hops = sse_decode_list_network_interface_hop(deserializer);
    return NetworkInterfaceHops(hops: var_hops);
  }

  @protected
  NodeHopStats sse_decode_node_hop_stats(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_targetIp = sse_decode_String(deserializer);
    var var_latencyMs = sse_decode_f_64(deserializer);
    var var_packetLoss = sse_decode_f_32(deserializer);
    var var_nodeName = sse_decode_String(deserializer);
    return NodeHopStats(
      targetIp: var_targetIp,
      latencyMs: var_latencyMs,
      packetLoss: var_packetLoss,
      nodeName: var_nodeName,
    );
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusSubscriber(
    EventBusSubscriber self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EventBusSubscriberImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandle(
    JoinHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as JoinHandleImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleResultString(
    JoinHandleResultString self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as JoinHandleResultStringImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeerRoutePair(
    PeerRoutePair self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PeerRoutePairImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusSubscriber(
    EventBusSubscriber self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EventBusSubscriberImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandle(
    JoinHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as JoinHandleImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleResultString(
    JoinHandleResultString self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as JoinHandleResultStringImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeerRoutePair(
    PeerRoutePair self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PeerRoutePairImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_flags_c(FlagsC self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_flags_c(self, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_flags_c(FlagsC self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.defaultProtocol, serializer);
    sse_encode_String(self.devName, serializer);
    sse_encode_bool(self.enableEncryption, serializer);
    sse_encode_bool(self.enableIpv6, serializer);
    sse_encode_u_32(self.mtu, serializer);
    sse_encode_bool(self.latencyFirst, serializer);
    sse_encode_bool(self.enableExitNode, serializer);
    sse_encode_bool(self.noTun, serializer);
    sse_encode_bool(self.useSmoltcp, serializer);
    sse_encode_String(self.relayNetworkWhitelist, serializer);
    sse_encode_bool(self.disableP2P, serializer);
    sse_encode_bool(self.relayAllPeerRpc, serializer);
    sse_encode_bool(self.disableUdpHolePunching, serializer);
    sse_encode_bool(self.multiThread, serializer);
    sse_encode_i_32(self.dataCompressAlgo, serializer);
    sse_encode_bool(self.bindDevice, serializer);
    sse_encode_bool(self.enableKcpProxy, serializer);
    sse_encode_bool(self.disableKcpInput, serializer);
    sse_encode_bool(self.disableRelayKcp, serializer);
    sse_encode_bool(self.proxyForwardBySystem, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_kv_network_status(
    KVNetworkStatus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.totalNodes, serializer);
    sse_encode_list_kv_node_info(self.nodes, serializer);
  }

  @protected
  void sse_encode_kv_node_connection_stats(
    KVNodeConnectionStats self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.connType, serializer);
    sse_encode_u_64(self.rxBytes, serializer);
    sse_encode_u_64(self.txBytes, serializer);
    sse_encode_u_64(self.rxPackets, serializer);
    sse_encode_u_64(self.txPackets, serializer);
  }

  @protected
  void sse_encode_kv_node_info(KVNodeInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.hostname, serializer);
    sse_encode_String(self.ipv4, serializer);
    sse_encode_f_64(self.latencyMs, serializer);
    sse_encode_String(self.nat, serializer);
    sse_encode_list_node_hop_stats(self.hops, serializer);
    sse_encode_f_32(self.lossRate, serializer);
    sse_encode_list_kv_node_connection_stats(self.connections, serializer);
    sse_encode_String(self.version, serializer);
    sse_encode_i_32(self.cost, serializer);
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeerRoutePair(
    List<PeerRoutePair> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeerRoutePair(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_kv_node_connection_stats(
    List<KVNodeConnectionStats> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_kv_node_connection_stats(item, serializer);
    }
  }

  @protected
  void sse_encode_list_kv_node_info(
    List<KVNodeInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_kv_node_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_network_interface_hop(
    List<NetworkInterfaceHop> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_network_interface_hop(item, serializer);
    }
  }

  @protected
  void sse_encode_list_node_hop_stats(
    List<NodeHopStats> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_node_hop_stats(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_network_interface_hop(
    NetworkInterfaceHop self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.interfaceName, serializer);
    sse_encode_u_32(self.hopCount, serializer);
  }

  @protected
  void sse_encode_network_interface_hops(
    NetworkInterfaceHops self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_network_interface_hop(self.hops, serializer);
  }

  @protected
  void sse_encode_node_hop_stats(NodeHopStats self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.targetIp, serializer);
    sse_encode_f_64(self.latencyMs, serializer);
    sse_encode_f_32(self.packetLoss, serializer);
    sse_encode_String(self.nodeName, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class EventBusSubscriberImpl extends RustOpaque implements EventBusSubscriber {
  // Not to be used by end users
  EventBusSubscriberImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EventBusSubscriberImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_EventBusSubscriber,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_EventBusSubscriber,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_EventBusSubscriberPtr,
  );
}

@sealed
class JoinHandleImpl extends RustOpaque implements JoinHandle {
  // Not to be used by end users
  JoinHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JoinHandleImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_JoinHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_JoinHandle,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_JoinHandlePtr,
  );
}

@sealed
class JoinHandleResultStringImpl extends RustOpaque
    implements JoinHandleResultString {
  // Not to be used by end users
  JoinHandleResultStringImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JoinHandleResultStringImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_JoinHandleResultString,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_JoinHandleResultString,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_JoinHandleResultStringPtr,
  );
}

@sealed
class PeerRoutePairImpl extends RustOpaque implements PeerRoutePair {
  // Not to be used by end users
  PeerRoutePairImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PeerRoutePairImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PeerRoutePair,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PeerRoutePair,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PeerRoutePairPtr,
  );
}
