// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(::prost_reflect::ReflectMessage)]
#[prost_reflect(message_name = "error.OtherError")]
#[prost_reflect(file_descriptor_set_bytes = "crate::proto::DESCRIPTOR_POOL_BYTES")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OtherError {
    #[prost(string, tag = "1")]
    pub error_message: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(::prost_reflect::ReflectMessage)]
#[prost_reflect(message_name = "error.InvalidMethodIndex")]
#[prost_reflect(file_descriptor_set_bytes = "crate::proto::DESCRIPTOR_POOL_BYTES")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvalidMethodIndex {
    #[prost(string, tag = "1")]
    pub service_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub method_index: u32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(::prost_reflect::ReflectMessage)]
#[prost_reflect(message_name = "error.InvalidService")]
#[prost_reflect(file_descriptor_set_bytes = "crate::proto::DESCRIPTOR_POOL_BYTES")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvalidService {
    #[prost(string, tag = "1")]
    pub service_name: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(::prost_reflect::ReflectMessage)]
#[prost_reflect(message_name = "error.ProstDecodeError")]
#[prost_reflect(file_descriptor_set_bytes = "crate::proto::DESCRIPTOR_POOL_BYTES")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProstDecodeError {}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(::prost_reflect::ReflectMessage)]
#[prost_reflect(message_name = "error.ProstEncodeError")]
#[prost_reflect(file_descriptor_set_bytes = "crate::proto::DESCRIPTOR_POOL_BYTES")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProstEncodeError {}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(::prost_reflect::ReflectMessage)]
#[prost_reflect(message_name = "error.ExecuteError")]
#[prost_reflect(file_descriptor_set_bytes = "crate::proto::DESCRIPTOR_POOL_BYTES")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteError {
    #[prost(string, tag = "1")]
    pub error_message: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(::prost_reflect::ReflectMessage)]
#[prost_reflect(message_name = "error.MalformatRpcPacket")]
#[prost_reflect(file_descriptor_set_bytes = "crate::proto::DESCRIPTOR_POOL_BYTES")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MalformatRpcPacket {
    #[prost(string, tag = "1")]
    pub error_message: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(::prost_reflect::ReflectMessage)]
#[prost_reflect(message_name = "error.Timeout")]
#[prost_reflect(file_descriptor_set_bytes = "crate::proto::DESCRIPTOR_POOL_BYTES")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Timeout {
    #[prost(string, tag = "1")]
    pub error_message: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(::prost_reflect::ReflectMessage)]
#[prost_reflect(message_name = "error.Error")]
#[prost_reflect(file_descriptor_set_bytes = "crate::proto::DESCRIPTOR_POOL_BYTES")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Error {
    #[prost(oneof = "error::ErrorKind", tags = "1, 2, 3, 4, 5, 6, 7, 8")]
    pub error_kind: ::core::option::Option<error::ErrorKind>,
}
/// Nested message and enum types in `Error`.
pub mod error {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ErrorKind {
        #[prost(message, tag = "1")]
        OtherError(super::OtherError),
        #[prost(message, tag = "2")]
        InvalidMethodIndex(super::InvalidMethodIndex),
        #[prost(message, tag = "3")]
        InvalidService(super::InvalidService),
        #[prost(message, tag = "4")]
        ProstDecodeError(super::ProstDecodeError),
        #[prost(message, tag = "5")]
        ProstEncodeError(super::ProstEncodeError),
        #[prost(message, tag = "6")]
        ExecuteError(super::ExecuteError),
        #[prost(message, tag = "7")]
        MalformatRpcPacket(super::MalformatRpcPacket),
        #[prost(message, tag = "8")]
        Timeout(super::Timeout),
    }
}
